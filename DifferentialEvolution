import random
import Neural
from math import sqrt
class Neuron:
    attr = []
    features=0
    MF=.5
    CR=.9
    def __init__(self, numAttr):
        self.features=numAttr
        self.attr=[None]*numAttr
        i=0
        for i in range(0,numAttr):
            self.attr[i]=0
        self.features=len(self.attr)

    def mutate(self,xr1,xr2,xr3): 
        #mutation in DE adds weighted difference of 2 distinct vectors to a third
        donor=Neuron(len(self.attr))
        i=0
        while i<len(self.attr):
            donor.attr[i]=xr1.attr[i]+self.MF*(xr2.attr[i]-xr3.attr[i])
            i+=1
        
        return donor

    def crossover(self,donor):
        #we implement binomial crossover
        trial=Neuron(len(self.attr))
        i=0
        while i<len(self.attr):
            #if random number is less than crossover rate, use trial
            if random.uniform(0,1)<self.CR:
                trial.attr[i]=donor.attr[i]
            #otherwise use selected vector
            else:
                trial.attr[i]=self.attr[i]
            i+=1
        return trial

    #equal is to make sure three distinct vectors are chosen for mutation
    def equal(self, compared):
        i=0
        while i<len(self.attr):
            if self.attr[i]!=compared.attr[i]:
                return False
            i+=1
        return True
        


class DifferentialEvolution:
    num_input_nodes = 2
    num_output_nodes = 1
    num_hidden_layers = 2
    num_hidden_nodes = 10   


    maxSize=20  #tunable, population size
    noSigChange=0   #keeps track of change in best
    maxRuns=25  
    population=[None]*maxSize
    bestInd=None
    #add variables for NN
    num_inputs = 2  #changes by dataset
    num_outputs = 1

    def __init__(self):
        init_bounds = sqrt(6/(self.num_inputs+self.num_outputs))

        for x in range(0,len(self.population)):
            in_hidden_edges = self.num_input_nodes * self.num_hidden_nodes

            hidden_hidden_edges = 0

            for i in range(self.num_hidden_layers -1):

                hidden_hidden_edges += self.num_hidden_nodes * self.num_hidden_nodes

            hidden_out_edges = self.num_hidden_nodes * self.num_output_nodes

            individual = Neuron(in_hidden_edges + hidden_hidden_edges + hidden_out_edges)

            for y in range(0, len(individual.attr)):
                individual.attr[y]=random.uniform(-init_bounds,init_bounds)
                #individual.attr.append(random.uniform(-init_bounds,init_bounds))
                #individual[y] = random.uniform(-init_bounds, init_bounds)

            #self.population.append(individual)# = individual
            self.bestInd=individual #just use last as placeholder
            if(x<len(self.population)):
                self.population[x]=individual

    def evaluate(self, individual,databreak):
        weights = individual.attr
        point1 = self.num_input_nodes*self.num_hidden_nodes
        point2 = self.num_input_nodes*self.num_hidden_nodes+(self.num_hidden_nodes*(self.num_hidden_layers-1)*self.num_hidden_nodes)
        input = weights[:point1]
        hidden = weights[point1:point2]
        output = weights[point2:len(weights)]
        nn = Neural.NeuralNetwork(databreak)
        # net = nn.create_network(input,hidden,output)
        error = nn.forward_propagate(input,hidden,output)

        return error

    def final_eval(self, individual, databreak):

        weights = individual.attr
        point1 = self.num_input_nodes*self.num_hidden_nodes
        point2 = self.num_input_nodes*self.num_hidden_nodes+(self.num_hidden_nodes*(self.num_hidden_layers-1)*self.num_hidden_nodes)
        input = weights[:point1]
        hidden = weights[point1:point2]
        output = weights[point2:len(weights)]
        nn = Neural.NeuralNetwork(databreak)
        # net = nn.create_network(input,hidden,output)
        error = nn.final_eval(input,hidden,output)

        return error

    def select(self):
        finish=False
        while(finish==False):
            picked=random.randint(0,self.maxSize)
            if(picked<len(self.population)):
                finish=True
                selected=self.population[picked]
        return selected
    def findBest(self,pop,databreak):
        for i in range (0,len(self.population)-1):
            if self.bestInd is None:
                self.bestInd=pop[i]
            elif self.evaluate(pop[i],databreak)<self.evaluate(self.bestInd,databreak):
                self.bestInd=pop[i]
            else:
                pass
    #used in evaluation, keep the better performer
    def survival(self,trial,base,databreak):
        if self.evaluate(trial,databreak)<self.evaluate(base,databreak):
            return trial
        else:
            return base

        

if __name__ == '__main__' :
        de = DifferentialEvolution()
        final_errors=list()
        for databreak in range(5):
            de.findBest(de.population,databreak)
            while(de.noSigChange<de.maxRuns):
                #xi=de.select(de.population)#implement using best ind
                xi=de.bestInd
                xr1=de.select()
                while(xr1.equal(xi)):
                    xr1=de.select()

                xr2=de.select()
                while(xr2.equal(xi) or xr2.equal(xr1)):
                        xr2=de.select()

                xr3=de.select()
                while(xi.equal(xr3) or xr1.equal(xr3) or xr2.equal(xr3)):
                    xr3=de.select() 

                donor=xi.mutate(xr1,xr2,xr3)
                trial=xi.crossover(donor)

                #performs comparison here
                xi=de.survival(trial,xi,databreak)

                #checking for changes in best individual
                if de.bestInd.equal(xi):
                    de.noSigChange+=1
                elif de.survival(xi,de.bestInd,databreak).equal(de.bestInd):
                    de.noSigChange+=1
                elif de.survival(xi,de.bestInd,databreak).equal(xi):
                    de.bestInd=xi
                    de.noSigChange=0    #fix for final

            final_errors.append(de.final_eval(de.bestInd, databreak))
        print("Best individual weight matrix found. Individual: %s Score: %s." %(str(de.bestInd.attr), str(final_errors)))

            
